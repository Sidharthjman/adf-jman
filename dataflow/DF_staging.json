{
	"name": "DF_staging",
	"properties": {
		"folder": {
			"name": "quizapp"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_sql",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_sql",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_sql",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_sql",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join2"
				},
				{
					"name": "split1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "aggregate4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          userID as integer,",
				"          QuizID as string,",
				"          mark as integer,",
				"          CreatorID as integer,",
				"          Sub_date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          userID as integer,",
				"          name as string,",
				"          email as string,",
				"          admin as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 aggregate(groupBy(CreatorID),",
				"     total_quizzes_conducted = count(CreatorID)) ~> aggregate1",
				"source2, aggregate1 join(userID == CreatorID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(total_quizzes_conducted = iif(isNull(total_quizzes_conducted), toInteger(0), toInteger(total_quizzes_conducted))) ~> derivedColumn1",
				"derivedColumn1, source1 join(source2@userID == source1@userID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 split(admin == true(),",
				"     disjoint: false) ~> split1@(admin, student)",
				"split1@student aggregate(groupBy(split1@student@userID,",
				"          name,",
				"          email,",
				"          QuizID,",
				"          mark,",
				"          Sub_date),",
				"     total_quizzes_attended = count(split1@student@userID)) ~> aggregate2",
				"split1@admin aggregate(groupBy(split1@admin@userID,",
				"          name,",
				"          email,",
				"          total_quizzes_conducted),",
				"     {split1@admin@userID} = max(split1@admin@userID)) ~> aggregate3",
				"aggregate2 aggregate(groupBy(userID,",
				"          name,",
				"          email),",
				"     total_marks = sum(mark),",
				"          total_quizes_attended = count(userID)) ~> aggregate4",
				"aggregate3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          userID as string,",
				"          QuizID as string,",
				"          mark as string,",
				"          CreatorID as string,",
				"          Sub_date as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"aggregate4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          userID as string,",
				"          QuizID as string,",
				"          mark as string,",
				"          CreatorID as string,",
				"          Sub_date as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}